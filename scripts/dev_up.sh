#!/usr/bin/env bash
set -euo pipefail
# dev_up.sh - single canonical helper to start the dev stack
# Behavior:
# - Detect free host ports for key services (if default port in use, pick next free)
# - Write .env.local with chosen host port mappings
# - Start docker compose with Docker_Canonical.yml using .env.local
# - Wait for somabrain health endpoint and write ports.json for testers

ROOT=$(cd "$(dirname "$0")/.." && pwd)
cd "$ROOT"

# Default memory endpoint (use host.docker.internal for macOS, fall back to localhost)
MEMORY_ENDPOINT=${SOMABRAIN_MEMORY_HTTP_ENDPOINT:-http://host.docker.internal:9595}

ENVFILE=.env.local
echo "# Generated by scripts/dev_up.sh" > $ENVFILE
echo "SOMABRAIN_MEMORY_HTTP_ENDPOINT=$MEMORY_ENDPOINT" >> $ENVFILE

python3 - <<'PY' >> $ENVFILE
from somabrain.ports import allocate_ports
ports = allocate_ports()
for key, value in ports.items():
    print(f"{key}={value}")
PY

echo "Wrote $ENVFILE:" && sed -n '1,200p' $ENVFILE

echo "Cleaning any previous compose state (down --remove-orphans)"
docker compose --env-file $ENVFILE -f Docker_Canonical.yml down --remove-orphans || true
echo "Bringing up docker compose (this will build the somabrain image)..."
docker compose --env-file $ENVFILE -f Docker_Canonical.yml up -d --build

# Wait for somabrain health
SOMABRAIN_PORT=$(grep '^SOMABRAIN_HOST_PORT=' $ENVFILE | cut -d= -f2)
echo "Waiting for somabrain on http://localhost:${SOMABRAIN_PORT}/health"
for i in $(seq 1 60); do
  if curl -fsS "http://localhost:${SOMABRAIN_PORT}/health" >/dev/null 2>&1; then
    echo "somabrain healthy"
    break
  fi
  sleep 2
done

echo "Writing ports.json"
python3 - <<PY
import json,subprocess
env={}
with open('.env.local') as f:
    for l in f:
        if '=' in l:
            k,v=l.strip().split('=',1)
            env[k]=v
ports={}
ports.update(env)
services=['somabrain','redis','kafka','prometheus','postgres']
for s in services:
    try:
        out=subprocess.check_output(['docker','compose','-f','Docker_Canonical.yml','port',s,'9696' if s=='somabrain' else '0'], text=True).strip()
        ports[s+'_host_mapping']=out
    except Exception:
        ports[s+'_host_mapping']=''
open('ports.json','w').write(json.dumps(ports,indent=2))
print('wrote ports.json')
PY

echo "Done. Use ports.json for test harness or inspect with 'cat ports.json'"
