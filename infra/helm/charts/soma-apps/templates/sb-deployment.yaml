{{- if .Values.sb.enabled }}
{{- $root := . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "soma-apps.componentName" (dict "root" $root "component" "sb") }}
  namespace: {{ $root.Values.global.namespace }}
  labels:
{{ include "soma-apps.labels" (dict "root" $root "component" "sb") | indent 4 }}
spec:
  replicas: {{ .Values.sb.replicaCount }}
  selector:
    matchLabels:
{{ include "soma-apps.labels" (dict "root" $root "component" "sb") | indent 6 }}
  template:
    metadata:
      labels:
{{ include "soma-apps.labels" (dict "root" $root "component" "sb") | indent 8 }}
    spec:
      {{- if .Values.securityContext.pod.enabled }}
      securityContext:
{{ include "soma-apps.podSecurityContext" . | indent 8 }}
      {{- end }}
      containers:
        - name: sb
          image: "{{ .Values.sb.image.repository }}:{{ .Values.sb.image.tag }}"
          imagePullPolicy: {{ .Values.sb.image.pullPolicy | default $root.Values.global.imagePullPolicy }}
          ports:
            - containerPort: {{ .Values.sb.containerPort }}
              name: http
          {{- if .Values.securityContext.container.enabled }}
          securityContext:
{{ include "soma-apps.containerSecurityContext" . | indent 12 }}
          {{- end }}
          {{- $hasEnvFrom := or .Values.memory (and .Values.jwt .Values.jwt.enabled) }}
          {{- if $hasEnvFrom }}
          envFrom:
            {{- if .Values.memory }}
            - secretRef:
                name: {{ include "soma-apps.memorySecretName" $root }}
            {{- end }}
            {{- if and .Values.jwt .Values.jwt.enabled }}
            - secretRef:
                name: {{ include "soma-apps.jwtSecretName" $root }}
            {{- end }}
          {{- end }}
          env:
{{- range $key, $value := $root.Values.envCommon }}
            - name: {{ $key }}
              value: "{{ $value }}"
{{- end }}
{{- range $key, $value := .Values.sb.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
{{- end }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.sb.containerPort }}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.sb.containerPort }}
            initialDelaySeconds: 10
            periodSeconds: 20
          resources:
{{ toYaml .Values.sb.resources | indent 12 }}
{{- end }}
