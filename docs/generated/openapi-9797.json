{"openapi":"3.1.0","info":{"title":"SomaBrain - Cognitive AI System","description":"Advanced brain-like cognitive architecture for AI processing with real-time neural processing","version":"1.0.0"},"paths":{"/persona/{pid}":{"put":{"summary":"Put Persona","description":"Create or update a Persona record.\n\nUses optimistic CAS if the client supplies an If-Match header containing the\ncurrent ETag. Returns an ETag header for the newly stored representation.","operationId":"put_persona_persona__pid__put","parameters":[{"name":"pid","in":"path","required":true,"schema":{"type":"string","title":"Pid"}},{"name":"if-match","in":"header","required":false,"schema":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"If-Match"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Persona"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"get":{"summary":"Get Persona","description":"Retrieve the latest Persona record for pid. Returns 404 if not found.","operationId":"get_persona_persona__pid__get","parameters":[{"name":"pid","in":"path","required":true,"schema":{"type":"string","title":"Pid"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"summary":"Delete Persona","description":"Append a persona tombstone for pid. Best-effort delete for Phase 1.","operationId":"delete_persona_persona__pid__delete","parameters":[{"name":"pid","in":"path","required":true,"schema":{"type":"string","title":"Pid"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/rag/retrieve":{"post":{"summary":"Rag Retrieve","operationId":"rag_retrieve_rag_retrieve_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RAGRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RAGResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/metrics":{"get":{"summary":"Metrics Endpoint","description":"FastAPI endpoint for exposing Prometheus metrics.\n\nReturns the current metrics in Prometheus exposition format.\nThis endpoint can be scraped by Prometheus servers for monitoring.\n\nReturns:\n    Response: FastAPI response with metrics data in Prometheus format.\n\nExample:\n    >>> # Access via: GET /metrics\n    >>> response = await metrics_endpoint()\n    >>> print(response.media_type)  # 'text/plain; version=0.0.4; charset=utf-8'","operationId":"metrics_endpoint_metrics_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/health":{"get":{"summary":"Health","operationId":"health_health_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HealthResponse"}}}}}}},"/micro/diag":{"get":{"summary":"Micro Diag","operationId":"micro_diag_micro_diag_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/recall":{"post":{"summary":"Recall","operationId":"recall_recall_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RecallRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RecallResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/remember":{"post":{"summary":"Remember","operationId":"remember_remember_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RememberRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RememberResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/sleep/run":{"post":{"summary":"Sleep Run","operationId":"sleep_run_sleep_run_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SleepRunRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SleepRunResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/sleep/status":{"get":{"summary":"Sleep Status","operationId":"sleep_status_sleep_status_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SleepStatusResponse"}}}}}}},"/sleep/status/all":{"get":{"summary":"Sleep Status All","description":"Admin view: list sleep status for all known tenants.\n\nReturns { enabled, interval_seconds, tenants: { <tid>: {nrem, rem} } }","operationId":"sleep_status_all_sleep_status_all_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SleepStatusAllResponse"}}}}}}},"/plan/suggest":{"post":{"summary":"Plan Suggest","description":"Suggest a small plan derived from the semantic graph around a task key.\n\nBody: { task_key: str, max_steps?: int, rel_types?: [str], universe?: str }\nReturns: { plan: [str] }","operationId":"plan_suggest_plan_suggest_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PlanSuggestRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PlanSuggestResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/link":{"post":{"summary":"Link","description":"Create a link between two memory keys or coordinates.\n\nBody:\n- from_key/to_key (strings) OR from_coord/to_coord (comma string or [x,y,z])\n- type (optional), weight (optional)","operationId":"link_link_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LinkRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LinkResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/graph/links":{"post":{"summary":"Graph Links","operationId":"graph_links_graph_links_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GraphLinksRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GraphLinksResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/act":{"post":{"summary":"Act","operationId":"act_act_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ActRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ActResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/reflect":{"post":{"summary":"Reflect","operationId":"reflect_reflect_post","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ReflectResponse"}}}}}}},"/migrate/export":{"post":{"summary":"Migrate Export","operationId":"migrate_export_migrate_export_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MigrateExportRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MigrateExportResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/migrate/import":{"post":{"summary":"Migrate Import","description":"Import memories and optionally warm WM from an export payload.\n\nBest-effort: supports both local and HTTP client modes. Returns counts for\nimported memories and warmed WM items.","operationId":"migrate_import_migrate_import_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MigrateImportRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MigrateImportResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/personality":{"get":{"summary":"Get Personality","operationId":"get_personality_personality_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PersonalityState"}}}}}},"post":{"summary":"Set Personality","operationId":"set_personality_personality_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PersonalityState"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PersonalityState"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/brain/core/stats":{"get":{"summary":"Get Brain Core Stats","description":"Get statistics from all brain components.","operationId":"get_brain_core_stats_brain_core_stats_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/metrics/snapshot":{"get":{"summary":"Metrics Snapshot","description":"Return a compact JSON snapshot of key runtime stats (non-minimal only).","operationId":"metrics_snapshot_metrics_snapshot_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/brain/hippocampus/replay":{"post":{"summary":"Trigger Memory Replay","description":"Manually trigger hippocampus memory replay.","operationId":"trigger_memory_replay_brain_hippocampus_replay_post","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/brain/hippocampus/memories":{"get":{"summary":"Get Consolidated Memories","description":"Get consolidated memories from hippocampus.","operationId":"get_consolidated_memories_brain_hippocampus_memories_get","parameters":[{"name":"query","in":"query","required":false,"schema":{"type":"string","default":"","title":"Query"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/brain/prefrontal/decide":{"post":{"summary":"Make Decision","description":"Make a decision from provided options using prefrontal cortex.","operationId":"make_decision_brain_prefrontal_decide_post","requestBody":{"content":{"application/json":{"schema":{"items":{"additionalProperties":true,"type":"object"},"type":"array","title":"Options"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/brain/prefrontal/plan":{"post":{"summary":"Create Plan","description":"Create a plan using prefrontal cortex.","operationId":"create_plan_brain_prefrontal_plan_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Body_create_plan_brain_prefrontal_plan_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/brain/prefrontal/working-memory":{"get":{"summary":"Get Working Memory","description":"Get current working memory contents.","operationId":"get_working_memory_brain_prefrontal_working_memory_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/neuromodulators":{"get":{"summary":"Get Neuromodulators","operationId":"get_neuromodulators_neuromodulators_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NeuromodStateModel"}}}}}},"post":{"summary":"Set Neuromodulators","operationId":"set_neuromodulators_neuromodulators_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NeuromodStateModel"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NeuromodStateModel"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"ActRequest":{"properties":{"task":{"type":"string","title":"Task"},"top_k":{"type":"integer","title":"Top K","default":3},"universe":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Universe"}},"type":"object","required":["task"],"title":"ActRequest","description":"Schema for action execution requests.\n\nDefines the structure for requests to execute cognitive actions or tasks,\nwith optional universe filtering and result limiting.\n\nAttributes:\n    task (str): Description of the task or action to perform.\n    top_k (int): Number of top results to return. Default 3.\n    universe (Optional[str]): Optional universe/namespace filter.\n\nExample:\n    >>> request = ActRequest(task=\"analyze data\", top_k=10, universe=\"analysis\")"},"ActResponse":{"properties":{"task":{"type":"string","title":"Task"},"results":{"items":{"$ref":"#/components/schemas/ActStepResult"},"type":"array","title":"Results"},"plan":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Plan"},"plan_universe":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Plan Universe"}},"type":"object","required":["task","results"],"title":"ActResponse","description":"Schema for action execution responses.\n\nDefines the structure of responses from action execution, including step-by-step\nresults and optional planning information.\n\nAttributes:\n    task (str): Original task description.\n    results (List[ActStepResult]): List of step results from execution.\n    plan (Optional[List[str]]): Optional list of planned steps.\n    plan_universe (Optional[str]): Universe associated with the plan.\n\nExample:\n    >>> response = ActResponse(\n    ...     task=\"solve problem\",\n    ...     results=[step_result1, step_result2],\n    ...     plan=[\"step 1\", \"step 2\", \"step 3\"]\n    ... )"},"ActStepResult":{"properties":{"step":{"type":"string","title":"Step"},"novelty":{"type":"number","title":"Novelty"},"pred_error":{"type":"number","title":"Pred Error"},"salience":{"type":"number","title":"Salience"},"stored":{"type":"boolean","title":"Stored"},"wm_hits":{"type":"integer","title":"Wm Hits"},"memory_hits":{"type":"integer","title":"Memory Hits"},"policy":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Policy"}},"type":"object","required":["step","novelty","pred_error","salience","stored","wm_hits","memory_hits"],"title":"ActStepResult","description":"Schema for individual action step results.\n\nRepresents the outcome of a single step in an action execution, including\ncognitive metrics and memory operation results.\n\nAttributes:\n    step (str): Description of the action step performed.\n    novelty (float): Novelty score for this step (0.0 to 1.0).\n    pred_error (float): Prediction error for this step (0.0 to 1.0).\n    salience (float): Salience score for this step.\n    stored (bool): Whether this step was stored in memory.\n    wm_hits (int): Number of working memory hits.\n    memory_hits (int): Number of long-term memory hits.\n    policy (Optional[dict]): Optional policy decision data.\n\nExample:\n    >>> result = ActStepResult(\n    ...     step=\"processed input\",\n    ...     novelty=0.2,\n    ...     pred_error=0.1,\n    ...     salience=0.8,\n    ...     stored=True,\n    ...     wm_hits=2,\n    ...     memory_hits=5\n    ... )"},"Body_create_plan_brain_prefrontal_plan_post":{"properties":{"goal":{"additionalProperties":true,"type":"object","title":"Goal"},"current_state":{"additionalProperties":true,"type":"object","title":"Current State"}},"type":"object","required":["goal","current_state"],"title":"Body_create_plan_brain_prefrontal_plan_post"},"GraphLinksRequest":{"properties":{"from_key":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"From Key"},"from_coord":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"From Coord"},"type":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Type"},"limit":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Limit","default":50},"universe":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Universe"}},"type":"object","title":"GraphLinksRequest"},"GraphLinksResponse":{"properties":{"edges":{"items":{"additionalProperties":true,"type":"object"},"type":"array","title":"Edges"},"universe":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Universe"}},"type":"object","required":["edges"],"title":"GraphLinksResponse"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"HealthResponse":{"properties":{"ok":{"type":"boolean","title":"Ok"},"components":{"additionalProperties":true,"type":"object","title":"Components"}},"type":"object","required":["ok","components"],"title":"HealthResponse","description":"Schema for system health check responses.\n\nProvides a simple health status response with component-level status information\nfor monitoring the system's operational state.\n\nAttributes:\n    ok (bool): Overall system health status.\n    components (dict): Dictionary of component names to their status information.\n\nExample:\n    >>> response = HealthResponse(\n    ...     ok=True,\n    ...     components={\"memory\": \"healthy\", \"wm\": \"healthy\", \"api\": \"healthy\"}\n    ... )"},"LinkRequest":{"properties":{"from_key":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"From Key"},"to_key":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"To Key"},"from_coord":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"From Coord"},"to_coord":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"To Coord"},"type":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Type"},"weight":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Weight","default":1.0},"universe":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Universe"}},"type":"object","title":"LinkRequest"},"LinkResponse":{"properties":{"ok":{"type":"boolean","title":"Ok"}},"type":"object","required":["ok"],"title":"LinkResponse"},"MemoryPayload":{"properties":{"task":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Task"},"importance":{"type":"integer","title":"Importance","default":1},"memory_type":{"type":"string","title":"Memory Type","default":"episodic"},"timestamp":{"anyOf":[{"type":"number"},{"type":"null"}],"title":"Timestamp"},"universe":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Universe"},"who":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Who"},"did":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Did"},"what":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"What"},"where":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Where"},"when":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"When"},"why":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Why"}},"type":"object","title":"MemoryPayload","description":"Schema for episodic memory payloads.\n\nRepresents the structure of memory content stored in the system, including\nmetadata and optional event tuple fields following the \"who, did, what, where,\nwhen, why\" framework.\n\nAttributes:\n    task (Optional[str]): Associated task or context identifier.\n    importance (int): Importance score (higher values = more important). Default 1.\n    memory_type (str): Type of memory (\"episodic\", \"semantic\", etc.). Default \"episodic\".\n    timestamp (Optional[float]): Unix timestamp of memory creation.\n    universe (Optional[str]): Universe/namespace identifier.\n    who (Optional[str]): Who performed the action.\n    did (Optional[str]): What action was performed.\n    what (Optional[str]): What was affected by the action.\n    where (Optional[str]): Where the action occurred.\n    when (Optional[str]): When the action occurred.\n    why (Optional[str]): Why the action was performed.\n\nExample:\n    >>> payload = MemoryPayload(\n    ...     task=\"learning\",\n    ...     importance=5,\n    ...     who=\"user\",\n    ...     did=\"studied\",\n    ...     what=\"neural networks\",\n    ...     why=\"to understand AI\"\n    ... )"},"MigrateExportRequest":{"properties":{"include_wm":{"type":"boolean","title":"Include Wm","default":true},"wm_limit":{"type":"integer","title":"Wm Limit","default":128}},"type":"object","title":"MigrateExportRequest","description":"Schema for data export requests.\n\nDefines parameters for exporting system data including memories and working memory\nfor backup, migration, or analysis purposes.\n\nAttributes:\n    include_wm (bool): Whether to include working memory in export. Default True.\n    wm_limit (int): Maximum number of working memory items to export. Default 128.\n\nExample:\n    >>> request = MigrateExportRequest(include_wm=True, wm_limit=256)"},"MigrateExportResponse":{"properties":{"manifest":{"additionalProperties":true,"type":"object","title":"Manifest"},"memories":{"items":{"additionalProperties":true,"type":"object"},"type":"array","title":"Memories"},"wm":{"items":{"additionalProperties":true,"type":"object"},"type":"array","title":"Wm","default":[]}},"type":"object","required":["manifest","memories"],"title":"MigrateExportResponse","description":"Schema for export operation responses.\n\nContains the exported data including manifest, memories, and working memory items.\n\nAttributes:\n    manifest (dict): Metadata about the export operation.\n    memories (list[dict]): List of exported memory items.\n    wm (list[dict]): List of exported working memory items. Default empty.\n\nExample:\n    >>> response = MigrateExportResponse(\n    ...     manifest={\"version\": \"1.0\", \"timestamp\": 1234567890},\n    ...     memories=[memory1, memory2],\n    ...     wm=[wm_item1, wm_item2]\n    ... )"},"MigrateImportRequest":{"properties":{"manifest":{"additionalProperties":true,"type":"object","title":"Manifest"},"memories":{"items":{"additionalProperties":true,"type":"object"},"type":"array","title":"Memories"},"wm":{"items":{"additionalProperties":true,"type":"object"},"type":"array","title":"Wm","default":[]},"replace":{"type":"boolean","title":"Replace","default":false}},"type":"object","required":["manifest","memories"],"title":"MigrateImportRequest","description":"Schema for data import requests.\n\nDefines the structure for importing previously exported data back into the system,\nwith options for replacement or merging.\n\nAttributes:\n    manifest (dict): Metadata from the export operation.\n    memories (list[dict]): List of memory items to import.\n    wm (list[dict]): List of working memory items to import. Default empty.\n    replace (bool): Whether to replace existing data or merge. Default False.\n\nExample:\n    >>> request = MigrateImportRequest(\n    ...     manifest={\"version\": \"1.0\"},\n    ...     memories=[memory1, memory2],\n    ...     wm=[wm_item1],\n    ...     replace=False\n    ... )"},"MigrateImportResponse":{"properties":{"imported":{"type":"integer","title":"Imported"},"wm_warmed":{"type":"integer","title":"Wm Warmed"}},"type":"object","required":["imported","wm_warmed"],"title":"MigrateImportResponse"},"NeuromodStateModel":{"properties":{"dopamine":{"type":"number","title":"Dopamine","default":0.4},"serotonin":{"type":"number","title":"Serotonin","default":0.5},"noradrenaline":{"type":"number","title":"Noradrenaline","default":0.0},"acetylcholine":{"type":"number","title":"Acetylcholine","default":0.0}},"type":"object","title":"NeuromodStateModel","description":"Schema for neuromodulator state representation.\n\nRepresents the current levels of key neuromodulators in the cognitive system,\nused for API serialization and state monitoring.\n\nAttributes:\n    dopamine (float): Dopamine level (0.0 to 1.0). Default 0.4.\n    serotonin (float): Serotonin level (0.0 to 1.0). Default 0.5.\n    noradrenaline (float): Noradrenaline level (0.0 to 1.0). Default 0.0.\n    acetylcholine (float): Acetylcholine level (0.0 to 1.0). Default 0.0.\n\nExample:\n    >>> state = NeuromodStateModel(\n    ...     dopamine=0.6,\n    ...     serotonin=0.7,\n    ...     noradrenaline=0.1,\n    ...     acetylcholine=0.2\n    ... )"},"Persona":{"properties":{"id":{"type":"string","title":"Id"},"display_name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Display Name"},"properties":{"additionalProperties":true,"type":"object","title":"Properties","default":{}},"fact":{"type":"string","title":"Fact","default":"persona"}},"type":"object","required":["id"],"title":"Persona","description":"Persona record schema used by the Persona endpoints.\n\nAttributes:\n    id: identifier for the persona (path param)\n    display_name: optional human-readable name\n    properties: arbitrary dict with persona data\n    fact: metadata field set to 'persona' when persisted"},"PersonalityState":{"properties":{"traits":{"additionalProperties":true,"type":"object","title":"Traits","default":{}}},"type":"object","title":"PersonalityState","description":"Schema for personality trait states.\n\nRepresents the current state of personality traits in the cognitive system.\nThis is a placeholder structure that can be extended with specific trait models.\n\nAttributes:\n    traits (dict[str, Any]): Dictionary of personality trait names to their values.\n                            Default empty dict.\n\nExample:\n    >>> state = PersonalityState(traits={\"openness\": 0.8, \"conscientiousness\": 0.6})"},"PlanSuggestRequest":{"properties":{"task_key":{"type":"string","title":"Task Key"},"max_steps":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Max Steps"},"rel_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Rel Types"},"universe":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Universe"}},"type":"object","required":["task_key"],"title":"PlanSuggestRequest"},"PlanSuggestResponse":{"properties":{"plan":{"items":{"type":"string"},"type":"array","title":"Plan"}},"type":"object","required":["plan"],"title":"PlanSuggestResponse"},"RAGCandidate":{"properties":{"coord":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Coord"},"key":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Key"},"score":{"type":"number","title":"Score"},"retriever":{"type":"string","title":"Retriever"},"payload":{"additionalProperties":true,"type":"object","title":"Payload"}},"type":"object","required":["score","retriever","payload"],"title":"RAGCandidate"},"RAGRequest":{"properties":{"query":{"type":"string","title":"Query"},"top_k":{"type":"integer","title":"Top K","default":10},"retrievers":{"items":{"type":"string"},"type":"array","title":"Retrievers","default":["vector","wm","graph"]},"rerank":{"type":"string","title":"Rerank","default":"cosine"},"persist":{"type":"boolean","title":"Persist","default":false},"universe":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Universe"}},"type":"object","required":["query"],"title":"RAGRequest"},"RAGResponse":{"properties":{"candidates":{"items":{"$ref":"#/components/schemas/RAGCandidate"},"type":"array","title":"Candidates"},"session_coord":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Session Coord"},"namespace":{"type":"string","title":"Namespace"},"trace_id":{"type":"string","title":"Trace Id"},"metrics":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Metrics"}},"type":"object","required":["candidates","namespace","trace_id"],"title":"RAGResponse"},"RecallRequest":{"properties":{"query":{"type":"string","title":"Query"},"top_k":{"type":"integer","title":"Top K","default":3},"universe":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Universe"}},"type":"object","required":["query"],"title":"RecallRequest","description":"Schema for memory recall API requests.\n\nDefines the structure for requests to retrieve memories from the cognitive system\nbased on a query string with optional filtering and ranking parameters.\n\nAttributes:\n    query (str): Search query string for memory retrieval.\n    top_k (int): Number of top similar memories to return. Default 3.\n    universe (Optional[str]): Optional universe/namespace filter for memories.\n\nExample:\n    >>> request = RecallRequest(query=\"machine learning\", top_k=5, universe=\"research\")"},"RecallResponse":{"properties":{"wm":{"items":{"$ref":"#/components/schemas/WMHit"},"type":"array","title":"Wm"},"memory":{"items":{"additionalProperties":true,"type":"object"},"type":"array","title":"Memory"},"namespace":{"type":"string","title":"Namespace"},"trace_id":{"type":"string","title":"Trace Id"},"deadline_ms":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Deadline Ms"},"idempotency_key":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Idempotency Key"},"reality":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Reality"},"drift":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Drift"},"hrr_cleanup":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Hrr Cleanup"}},"type":"object","required":["wm","memory","namespace","trace_id"],"title":"RecallResponse","description":"Canonical response model for the /recall endpoint.\n\nFields mirror what the runtime returns in `app.recall` so OpenAPI is accurate."},"ReflectResponse":{"properties":{"created":{"type":"integer","title":"Created"},"summaries":{"items":{"type":"string"},"type":"array","title":"Summaries"}},"type":"object","required":["created","summaries"],"title":"ReflectResponse"},"RememberRequest":{"properties":{"coord":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Coord","description":"x,y,z; optional — auto if omitted"},"payload":{"$ref":"#/components/schemas/MemoryPayload"}},"type":"object","required":["payload"],"title":"RememberRequest","description":"Schema for memory storage requests.\n\nDefines the structure for requests to store new memories in the cognitive system,\nincluding optional coordinate specification and memory payload.\n\nAttributes:\n    coord (Optional[str]): Optional 3D coordinate string \"x,y,z\" for memory placement.\n                          Auto-generated if omitted.\n    payload (MemoryPayload): Memory content and metadata to store.\n\nExample:\n    >>> request = RememberRequest(\n    ...     coord=\"1.0,2.0,3.0\",\n    ...     payload=MemoryPayload(task=\"example\", importance=3)\n    ... )"},"RememberResponse":{"properties":{"ok":{"type":"boolean","title":"Ok"},"success":{"type":"boolean","title":"Success"},"namespace":{"type":"string","title":"Namespace"},"trace_id":{"type":"string","title":"Trace Id"},"deadline_ms":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Deadline Ms"},"idempotency_key":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Idempotency Key"}},"type":"object","required":["ok","success","namespace","trace_id"],"title":"RememberResponse","description":"Canonical response model for the /remember endpoint.\n\nMirrors the ad-hoc dict returned by the runtime so docs and OpenAPI are precise."},"SleepRunRequest":{"properties":{"nrem":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Nrem","default":true},"rem":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Rem","default":true}},"type":"object","title":"SleepRunRequest"},"SleepRunResponse":{"properties":{"ok":{"type":"boolean","title":"Ok","description":"Whether the sleep run started successfully"},"run_id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Run Id","description":"Identifier for the initiated sleep run"},"started_at_ms":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Started At Ms","description":"Epoch ms when the run started"},"mode":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Mode","description":"Sleep mode executed, e.g. 'nrem' or 'rem'"},"details":{"anyOf":[{"additionalProperties":true,"type":"object"},{"type":"null"}],"title":"Details","description":"Optional additional runtime details"}},"type":"object","required":["ok"],"title":"SleepRunResponse"},"SleepStatusAllResponse":{"properties":{"enabled":{"type":"boolean","title":"Enabled"},"interval_seconds":{"type":"integer","title":"Interval Seconds"},"tenants":{"additionalProperties":{"additionalProperties":{"anyOf":[{"type":"number"},{"type":"null"}]},"type":"object"},"type":"object","title":"Tenants"}},"type":"object","required":["enabled","interval_seconds","tenants"],"title":"SleepStatusAllResponse"},"SleepStatusResponse":{"properties":{"enabled":{"type":"boolean","title":"Enabled"},"interval_seconds":{"type":"integer","title":"Interval Seconds"},"last":{"additionalProperties":{"anyOf":[{"type":"number"},{"type":"null"}]},"type":"object","title":"Last"}},"type":"object","required":["enabled","interval_seconds","last"],"title":"SleepStatusResponse"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"},"WMHit":{"properties":{"score":{"type":"number","title":"Score"},"payload":{"additionalProperties":true,"type":"object","title":"Payload"}},"type":"object","required":["score","payload"],"title":"WMHit"}}}}