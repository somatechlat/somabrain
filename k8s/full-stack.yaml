# Full-stack Kubernetes deployment for SomaBrain (strict, no mocks)
# Namespace: somabrain-prod (adjust as needed)
# This manifest includes:
# - Namespace
# - ConfigMap with base env (STRICT + BEST + required memory)
# - Secrets placeholders (jwt, db, kafka) -- create real secrets before apply
# - Somabrain Deployment + Service (port 9696)
# - Memory Service (SomaFractalMemory) Deployment + Service (port 9595)
# - Redis (cache) Deployment + Service
# - OPA (policy) Deployment + Service
# - PersistentVolumeClaim for somabrain outbox/logs
# NOTE: Replace image tags with immutable digests for production.
apiVersion: v1
kind: Namespace
metadata:
  name: somabrain-prod
  labels:
    app.kubernetes.io/name: somabrain
    app.kubernetes.io/part-of: somabrain
apiVersion: v1
kind: ConfigMap
metadata:
  name: somabrain-env
  namespace: somabrain-prod
  labels:
    app: somabrain
    tier: api
  annotations:
    somabrain.io/config-version: "1"
data:
  SOMABRAIN_HOST: "0.0.0.0"
  SOMABRAIN_PORT: "9696"
  SOMABRAIN_ENABLE_BEST: "1"
  SOMABRAIN_STRICT_REAL: "1"
  SOMABRAIN_FORCE_FULL_STACK: "1"
  SOMABRAIN_REQUIRE_MEMORY: "1"
  SOMABRAIN_PREDICTOR_PROVIDER: "mahal"
  SOMABRAIN_HTTP_MAX_CONNS: "64"
  SOMABRAIN_HTTP_KEEPALIVE: "32"
  SOMABRAIN_HTTP_RETRIES: "1"
  SOMABRAIN_MEMORY_PHASE_PRIORS: "bootstrap:1.05,general:1.0,specialized:1.03"
  SOMABRAIN_MEMORY_QUALITY_EXP: "1.0"
  # Endpoint for fractal memory inside cluster
  SOMABRAIN_MEMORY_HTTP_ENDPOINT: "http://somamemory.somabrain-prod.svc.cluster.local:9595"
  SOMABRAIN_REDIS_URL: "redis://sb-redis.somabrain-prod.svc.cluster.local:6379/0"
  SOMABRAIN_REDIS_HOST: "sb-redis.somabrain-prod.svc.cluster.local"
  SOMABRAIN_REDIS_PORT: "6379"
  SOMABRAIN_OPA_URL: "http://sb-opa.somabrain-prod.svc.cluster.local:8181"
  SOMABRAIN_DISABLE_AUTH: "1"
  # Observability endpoints (optional)
  SOMABRAIN_OTLP_ENDPOINT: "http://otel-collector:4318" # adjust or remove
  # Tenancy / defaults
  SOMABRAIN_DEFAULT_TENANT: "sandbox"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: somabrain-overrides
  namespace: somabrain-prod
data: {}

---
apiVersion: v1
kind: Secret
metadata:
  name: somabrain-secrets
  namespace: somabrain-prod
stringData:
  # Populate these with real values via sealed-secrets / external secret operator
  SOMABRAIN_JWT_PUBLIC_KEY_PATH: ""
  jwt_public_key.pem: ""
  SOMABRAIN_KAFKA_URL: "kafka:9092"
  SOMABRAIN_POSTGRES_DSN: "postgresql://somabrain:somabrain-dev-password@postgres.somabrain-prod.svc.cluster.local:5432/somabrain"
  SOMABRAIN_TOKEN_LEDGER_DSN: "postgresql://somabrain:somabrain-dev-password@postgres.somabrain-prod.svc.cluster.local:5432/somabrain"
  SOMABRAIN_FEEDBACK_DSN: "postgresql://somabrain:somabrain-dev-password@postgres.somabrain-prod.svc.cluster.local:5432/somabrain"

---
apiVersion: v1
kind: Secret
metadata:
  name: somabrain-postgres
  namespace: somabrain-prod
type: Opaque
stringData:
  POSTGRES_DB: "somabrain"
  POSTGRES_USER: "somabrain"
  POSTGRES_PASSWORD: "somabrain-dev-password"

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: somabrain-prod
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: somabrain-prod
spec:
  serviceName: postgres
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15.7-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: somabrain-postgres
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 6
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"
            initialDelaySeconds: 30
            periodSeconds: 20
            failureThreshold: 6
          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      securityContext:
        fsGroup: 999
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: somabrain-outbox-pvc
  namespace: somabrain-prod
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 2Gi

---
---
apiVersion: v1
kind: Service
metadata:
  name: somabrain
  namespace: somabrain-prod
spec:
  selector:
    app: somabrain
  ports:
    - name: http
      port: 9696
      targetPort: 9696
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: somabrain-public
  namespace: somabrain-prod
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "external" # adjust per provider
spec:
  selector:
    app: somabrain
  ports:
    - name: http-external
      port: 9999
      targetPort: 9696
  type: LoadBalancer
  externalTrafficPolicy: Cluster

---
# External ingress for production traffic binding to somabrain-public on port 9999 via the ingress controller.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: somabrain
  namespace: somabrain-prod
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "32m"
spec:
  ingressClassName: nginx
  rules:
    - host: somabrain.internal
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: somabrain
                port:
                  number: 9696
  tls:
    - hosts:
        - somabrain.internal
      secretName: somabrain-tls # provide cert or remove TLS block if terminating elsewhere

---
# Dedicated test ClusterIP service exposing port 9797 internally mapping to same pods.
# Useful for segregating monitoring or test traffic without altering primary service.
apiVersion: v1
kind: Service
metadata:
  name: somabrain-test
  namespace: somabrain-prod
  labels:
    app: somabrain
    purpose: test-port
spec:
  selector:
    app: somabrain
  ports:
    - name: http-test
      port: 9797
      targetPort: 9696
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: somabrain
  namespace: somabrain-prod
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: somabrain
  template:
    metadata:
      labels:
        app: somabrain
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15.7-alpine
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - >-
              until pg_isready -h postgres.somabrain-prod.svc.cluster.local -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do echo "waiting for postgres"; sleep 2; done
          envFrom:
            - secretRef:
                name: somabrain-postgres
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "200m"
              memory: "128Mi"
      containers:
        - name: somabrain
          image: somabrain:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 9696
          envFrom:
            - configMapRef:
                name: somabrain-env
            - secretRef:
                name: somabrain-secrets
            - secretRef:
                name: somabrain-postgres
          volumeMounts:
            - name: outbox-vol
              mountPath: /app/data/somabrain
            - name: jwt-pub
              mountPath: /secrets
              readOnly: true
            - name: overrides-vol
              mountPath: /overrides
          readinessProbe:
            httpGet:
              path: /health
              port: 9696
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health
              port: 9696
            initialDelaySeconds: 30
            periodSeconds: 30
            failureThreshold: 3
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1200m"
              memory: "2Gi"
      volumes:
        - name: outbox-vol
          persistentVolumeClaim:
            claimName: somabrain-outbox-pvc
        - name: jwt-pub
          secret:
            secretName: somabrain-secrets
            items:
              - key: jwt_public_key.pem
                path: jwt_pub.pem
        - name: overrides-vol
          configMap:
            name: somabrain-overrides

---
apiVersion: v1
kind: Service
metadata:
  name: somamemory
  namespace: somabrain-prod
spec:
  selector:
    app: somamemory
  ports:
    - port: 9595
      targetPort: 9595
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: somamemory
  namespace: somabrain-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: somamemory
  template:
    metadata:
      labels:
        app: somamemory
    spec:
      containers:
        - name: somamemory
          image: python:3.13-slim
          command:
            - "sh"
            - "-c"
            - |
              pip install fastapi uvicorn && \
              python - <<'PY'
              import os
              import time
              import hashlib
              from threading import RLock
              from fastapi import FastAPI, Request
              import uvicorn

              app = FastAPI()
              _STORE = []
              _LOCK = RLock()

              def _coord(key: str):
                  h = hashlib.blake2b(key.encode(), digest_size=12).digest()
                  a = int.from_bytes(h[0:4], 'big')/2**32
                  b = int.from_bytes(h[4:8], 'big')/2**32
                  c = int.from_bytes(h[8:12], 'big')/2**32
                  return f"{2*a-1:.6f},{2*b-1:.6f},{2*c-1:.6f}"

              @app.get('/health')
              def health():
                  with _LOCK:
                    return {'ok': True, 'items': len(_STORE)}

              @app.post('/remember')
              async def remember(body: dict, request: Request):
                  payload = body.get('payload') or {}
                  coord = body.get('coord') or _coord(str(payload.get('id') or time.time()))
                  record = {'coord': coord, 'payload': payload}
                  with _LOCK:
                      _STORE.append(record)
                  return {'coord': coord, 'payload': payload}

              @app.post('/recall')
              async def recall(body: dict):
                  top_k = int(body.get('top_k') or 5)
                  with _LOCK:
                      return [rec['payload'] for rec in _STORE[-top_k:]][::-1]

              host = os.getenv('SOMAMEMORY_HOST', '0.0.0.0')
              port = int(os.getenv('SOMAMEMORY_PORT', '9595'))
              uvicorn.run(app, host=host, port=port)
              PY
          ports:
            - containerPort: 9595
          env:
            - name: SOMAMEMORY_HOST
              value: "0.0.0.0"
            - name: SOMAMEMORY_PORT
              value: "9595"
          envFrom:
            - configMapRef:
                name: somabrain-env
            - secretRef:
                name: somabrain-secrets
          readinessProbe:
            httpGet:
              path: /health
              port: 9595
            initialDelaySeconds: 5
            periodSeconds: 8
          livenessProbe:
            httpGet:
              path: /health
              port: 9595
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            requests:
              cpu: "10m"
              memory: "64Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: sb-redis
  namespace: somabrain-prod
spec:
  selector:
    app: sb-redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sb-redis
  namespace: somabrain-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sb-redis
  template:
    metadata:
      labels:
        app: sb-redis
    spec:
      containers:
        - name: redis
          image: redis:7.2
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: sb-opa
  namespace: somabrain-prod
spec:
  selector:
    app: sb-opa
  ports:
    - port: 8181
      targetPort: 8181
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sb-opa
  namespace: somabrain-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sb-opa
  template:
    metadata:
      labels:
        app: sb-opa
    spec:
      containers:
        - name: opa
          image: openpolicyagent/opa:0.54.0
          args: ["run", "--server", "--addr=0.0.0.0:8181"]
          ports:
            - containerPort: 8181
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "200m"
              memory: "128Mi"

# NOTES:
# 1. Replace all :latest tags with digests for production.
# 2. Add NetworkPolicies, PodSecurityStandards, and RBAC as needed.
# 3. Integrate a proper Postgres, Kafka, and tracing stack separately (operators/helm charts).
# 4. To expose externally, add an Ingress or LoadBalancer service (not included here by default).
# 5. For TLS + mTLS fronting, deploy Envoy or Istio Gateway referencing the somabrain service.
