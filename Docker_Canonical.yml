services:
  redis:
    image: redis:7.2-alpine
    container_name: sb_redis
    networks:
      - somabrain_net
    ports:
      - "${REDIS_HOST_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Kafka in KRaft (no Zookeeper)
  kafka:
    image: bitnami/kafka:latest
    container_name: sb_kafka
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - "KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092"
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
    ports:
      - "${KAFKA_HOST_PORT:-9092}:9092"
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 8
    networks:
      - somabrain_net

  opa:
    image: openpolicyagent/opa:0.48.0
    container_name: sb_opa
    command: ["run", "--server", "--addr=0.0.0.0:8181", "/policies"]
    networks:
      - somabrain_net
    ports:
      - "8181:8181"
    volumes:
      - ./ops/opa/policies:/policies:ro

  prometheus:
    image: prom/prometheus:v2.49.0
    container_name: sb_prometheus
    networks:
      - somabrain_net
    ports:
      - "${PROMETHEUS_HOST_PORT:-9090}:9090"
    volumes:
      - ./docs/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  # Postgres for development
  postgres:
    image: postgres:15-alpine
    container_name: sb_postgres
    environment:
      - POSTGRES_USER=soma
      - POSTGRES_PASSWORD=soma_pass
      - POSTGRES_DB=somabrain
    ports:
      - "${POSTGRES_HOST_PORT:-15432}:5432"
    # Use a named Docker volume for postgres data to avoid host directory conflicts
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - somabrain_net

  somabrain:
    build:
      context: .
      dockerfile: Dockerfile
    image: somabrain:latest
    container_name: sb_somabrain
    depends_on:
      redis:
        condition: service_started
      kafka:
        condition: service_started
      opa:
        condition: service_started
      postgres:
        condition: service_started
    networks:
      - somabrain_net
    environment:
      SOMABRAIN_MEMORY_HTTP_ENDPOINT: "${SOMABRAIN_MEMORY_HTTP_ENDPOINT:-http://host.docker.internal:9595}"
      SOMABRAIN_HOST: "0.0.0.0"
      SOMABRAIN_PORT: "9696"
      # Use a single worker in dev to ensure in-process WM read-your-writes across requests
      SOMABRAIN_WORKERS: "1"
      SOMABRAIN_REDIS_URL: "redis://sb_redis:6379/0"
      SOMABRAIN_KAFKA_URL: "kafka://kafka:9092"
      SOMABRAIN_OPA_URL: "http://sb_opa:8181"
      SOMABRAIN_POSTGRES_DSN: "postgresql://soma:soma_pass@sb_postgres:5432/somabrain"
      SOMABRAIN_STRICT_REAL: "1"
      SOMABRAIN_FORCE_FULL_STACK: "1"
      SOMABRAIN_REQUIRE_MEMORY: "1"
      SOMABRAIN_ENABLE_BEST: "1"
      SOMABRAIN_PREDICTOR_PROVIDER: "mahal"
      SOMABRAIN_MEMORY_ENABLE_WEIGHTING: "1"
      SOMABRAIN_MEMORY_PHASE_PRIORS: "bootstrap:1.05,general:1.0,specialized:1.03"
      SOMABRAIN_MEMORY_QUALITY_EXP: "1.0"
      SOMABRAIN_DEFAULT_TENANT: "sandbox"
      SOMABRAIN_MODE: "enterprise"
    ports:
      - "${SOMABRAIN_HOST_PORT:-9696}:9696"
      - "9797:9696"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9696/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  kafka_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  somabrain_net:
    driver: bridge
